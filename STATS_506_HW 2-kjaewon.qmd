---
title: "HW 2-kjaewon"
format: pdf
editor: visual
---

Github Repository: https://github.com/kjaewon-umich/STATS506 

# Problem 1

## a.

### Version 1

```{r}
#' Dice Game Version 1 - Loop 
#' @param x Number of plays
#' @return Total score  after x times of game play

play_dice1 <- function (x) {
  
  score <- 0
  
  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  result <- sample(1:6, size = x, replace = TRUE)
  for (i in 1:x) {
    # Consider the cost to play
    score <- score - 2
    if (result[i] == 3 | result[i] == 5) {
      score <- score + (2 * result[i])
    } 
    # If 1, 2, 4, 6, there is no change to the score besides the loss of 2.
  }
  return(score)
}
```

### Version 2

```{r}
#' Dice Game Version 2 - Vectorized R Functions 
#' @param x Number of plays
#' @return Total score  after x times of game play

play_dice2 <- function (x) {
  
  score <- 0

  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  result <- sample(1:6, size = x, replace = TRUE)
  
  # Make sure to subtract the cost of play from the score
  score <- sum(result[result == 3 | result == 5] * 2) - 2 * x 
  return(score)
}
```

### Version 3 

```{r}
#' Dice Game Version 3 - Using `table` 
#' @param x Number of plays
#' @return Total score  after x times of game play

play_dice3 <- function(x) {
  
  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  # Roll all dice at once
  result <- sample(1:6, size = x, replace = TRUE)
  
  # Summarize the result using table() and convert to a factor with levels
  result <- table(factor(result, levels = 1:6))
  
  # Calculate total winnings and subtract the cost to play
  score <- result[3] * 3 * 2 + result[5] * 5 * 2 - 2 * x
  
  # For a cleaner output
  names(score) <- NULL
  
  return(score)
}
```

### Version 4

```{r}
#' Dice Game Version 4 - `apply` Functions 
#' @param x Number of plays
#' @return Total score  after x times of game play

play_dice4 <- function(x) {
  
  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  rolls <- sample(1:6, size = x, replace = TRUE)
  result <- sapply(rolls, function(roll) {
    if (roll == 3 | roll == 5) {
      return(roll * 2 - 2) 
    } else {
      return(-2)
    }
  })
  score <- sum(result)
  return(score)
}
```


## b.

### Version 1

```{r}
play_dice1(3)
play_dice1(3000)
```

### Version 2

```{r}
play_dice2(3)
play_dice2(3000)
```

### Version 3

```{r}
play_dice3(3)
play_dice3(3000)
```

### Version 4

```{r}
play_dice4(3)
play_dice4(3000)
```

## c.

After implementing the randomization control, the functions will be:

```{r}
#' Dice Game Version 1 - Loop (With Seed) 
#' @param x Number of plays
#' @param seed If a value is not specified, it will be kept as `NULL`
#' @return Total score  after x times of game play

play_dice1_with_seed <- function (x, seed = NULL) {
  
  score <- 0
  
  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  # Randomization Control
  set.seed(seed)
  
  result <- sample(1:6, size = x, replace = TRUE)
  for (i in 1:x) {
    # Consider the cost to play
    score <- score - 2
    if (result[i] == 3 | result[i] == 5) {
      score <- score + (2 * result[i])
    } 
    # If 1, 2, 4, 6, there is no change to the score besides the loss of 2.
  }
  return(score)
}

#' Dice Game Version 2 - Vectorized R Functions (With Seed)
#' @param x Number of plays
#' @param seed If a value is not specified, it will be kept as `NULL`
#' @return Total score  after x times of game play

play_dice2_with_seed <- function (x, seed = NULL) {
  
  score <- 0

  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  # Randomization Control
  set.seed(seed)
  
  result <- sample(1:6, size = x, replace = TRUE)
  
  # Make sure to subtract the cost of play from the score
  score <- sum(result[result == 3 | result == 5] * 2) - 2 * x 
  return(score)
}
  
#' Dice Game Version 3 - Using `table` (With Seed)
#' @param x Number of plays
#' @param seed If a value is not specified, it will be kept as `NULL`
#' @return Total score  after x times of game play

play_dice3_with_seed <- function(x, seed = NULL) {
  
  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  # Randomization Control
  set.seed(seed)
  
  # Roll all dice at once
  result <- sample(1:6, size = x, replace = TRUE)
  
  # Summarize the result using table() and convert to a factor with levels
  result <- table(factor(result, levels = 1:6))
  
  # Calculate total winnings and subtract the cost to play
  score <- result[3] * 3 * 2 + result[5] * 5 * 2 - 2 * x
  
  # For a cleaner output
  names(score) <- NULL
  
  return(score)
}

#' Dice Game Version 4 - `apply` Functions (With Seed)
#' @param x Number of plays
#' @param seed If a value is not specified, it will be kept as `NULL`
#' @return Total score  after x times of game play

play_dice4_with_seed <- function(x, seed = NULL) {
  if (x < 1) {
  # If 0 or less rolls, the game play is not available
  return(0)
  }
  
  # Randomization Control
  set.seed(seed)
  
  rolls <- sample(1:6, size = x, replace = TRUE)
  result <- sapply(rolls, function(roll) {
    if (roll == 3 | roll == 5) {
      return(roll * 2 - 2) 
    } else {
      return(-2)
    }
  })
  score <- sum(result)
  return(score)
}
```

### Version 1

```{r}
play_dice1_with_seed(x = 3, seed = 506)
play_dice1_with_seed(x = 3000, seed = 506)
```

### Version 2

```{r}
play_dice2_with_seed(x = 3, seed = 506)
play_dice2_with_seed(x = 3000, seed = 506)
```

### Version 3

```{r}
play_dice3_with_seed(x = 3, seed = 506)
play_dice3_with_seed(x = 3000, seed = 506)
```

### Version 4

```{r}
play_dice4_with_seed(x = 3, seed = 506)
play_dice4_with_seed(x = 3000, seed = 506)
```

## d.

```{r, message=FALSE}
library(microbenchmark)

microbenchmark(play_dice1(1000), 
               play_dice2(1000),
               play_dice3(1000),
               play_dice4(1000))

microbenchmark(play_dice1(100000), 
               play_dice2(100000),
               play_dice3(100000),
               play_dice4(100000))
```

We can observe that in both cases (1000 and 100,000 iterations), Version 2 (which uses built-in R vectorized functions) showcased the best performance. In contrast, Version 4 (which utilizes one of the ``apply()`` functions) performed the worst. Additionally, Version 3, which uses the ``table()`` function, demonstrated better performance than Version 1, which relies on loops.
  
This result aligns with initial expectations, as vectorized operations in R are generally optimized for speed, whereas loops and functions like ``apply()`` can introduce computational overhead, particularly for larger datasets. This performance difference becomes clearer with larger sample sizes, where the advantages of vectorization are more evident.

## e.

```{r,  out.height="70%", out.width="70%"}
n <- 100000
Result <- vector(length = n)
for (i in 1:n) {
  Result[i] <- play_dice2(3000)
}

hist(Result)
abline(v = mean(Result), col = "red")
```

Based on the Monte Carlo simulation, it is more likely to win the game than to lose. This can also be proved through combinatorics:

$$
\text{E}(\text{Score}) = \frac{2}{3} \cdot 0 + \frac{1}{6} \cdot 3 \cdot 2 + \frac{1}{6} \cdot 5 \cdot 2 - 2 = \frac{2}{3} > 0
$$

\newpage

# Problem 2

```{r}
car <- read.csv("cars.csv", header = TRUE)
head(car)
```

## a. 

```{r}
names(car) <- c("Height", "Length", "Width", "Driveline", "Engine_Type",
                "Hybrid", "Forward_Gears", "Transmission", "City_MPG", "Fuel",
                "Highway_MPG", "Classification", "ID", "Make", "Model_Year",
                "Year", "Horsepower", "Torque")
head(car)
```

## b.

```{r}
gasoline <- subset(car, Fuel == "Gasoline")
head(gasoline)
```

## c.

In order to evaluate the necessity of transformation, we will examine the distribution of highway gas milage via boxplot and histogram.

```{r, out.height="70%", out.width="70%"}
boxplot(gasoline$Highway_MPG, main="Distribution of Highway MPG", xlab="Highway MPG")
hist(gasoline$Highway_MPG, main="Histogram of Highway MPG", xlab="Highway MPG")
```

The initial histogram and boxplot show that the distribution of highway gas mileage is skewed to right. Skewed distributions can violate the one of key assumptions of linear regression, the normality of residuals. Thus, we applied a log transformation to ``Highway_MPG`` to address this issue. 

```{r,  out.height="70%", out.width="70%"}
gasoline$Highway_MPG <- log(gasoline$Highway_MPG)

boxplot(gasoline$Highway_MPG, main="Distribution of Highway MPG", xlab="Highway MPG")
hist(gasoline$Highway_MPG, main="Histogram of Highway MPG", xlab="Highway MPG")
```

The histogram and boxplot of log-transformed ``Highway_MPG`` indicate that the skewness has been reduced, yielding a more symmetric distribution. Therefore, we will use the log-transformed ``Highway_MPG`` variable in subsequent analyses.

## d.

```{r}
gasoline$Year <- as.factor(gasoline$Year)

highway.mpg <- lm(Highway_MPG ~ Torque + Horsepower + Height + Length + Width 
                 + Year, data = gasoline)
summary(highway.mpg)
```

Based on the R output, we can observe a significant negative relationship. The higher torque gets, it is predicted to yield lower highway milage on average. Highway gas milage decreases by 0.2294 for a one-unit increase of torque, holding other variables constant. From this, we can compute 

$$
e^{-0.2294} \approx 0.795 \rightarrow (1 - e^{-0.2294}) \cdot 100 \approx 20.5
$$

Thus, in terms of the original scale, this suggests that each unit increase in torque corresponds to approximately a 20.5% decrease in highway MPG.

## e.

```{r}
highway.mpg2 = lm(Highway_MPG ~ Torque * Horsepower  + Height + Length + Width
                  + Year, data = gasoline)
summary(highway.mpg2)
```

In order to choose reasonable range of values for torque and horsepower, first we examine their histograms and boxplots.

```{r, message=FALSE, out.height="70%", out.width="70%"}
hist(gasoline$Torque, xlab = "Torque", 
     main = "Distribution of Torque", xlim = c(0, max(gasoline$Torque)))
boxplot(gasoline$Torque, xlab = "Torque", main = "Distribution of Torque")

hist(gasoline$Horsepower, xlab = "Horsepower", 
     main = "Distribution of Horsepower", xlim = c(0, max(gasoline$Horsepower)))
boxplot(gasoline$Horsepower, xlab = "Horsepower", main = "Distribution of Horsepower")
```

We can observe that the distribution of torque approximately ranges from 100 to 750, with most values lying between 100 and 400. 
  
The distribution of horsepower ranges from about 100 to 650, with most values concentrated between 100 and 400. Hence, for the interaction plot, we will select these three values for horsepower: 150 (low horsepower), 250 (medium horsepower), and 350 (high horsepower). 
  
These values provide a representative range of the data that will allow us to explore the interaction between torque and horsepower on highway MPG.

```{r, message=FALSE, out.height="70%", out.width="70%"}
library(emmeans)
emmip(highway.mpg2, Horsepower ~ Torque, 
      at = list(Torque = seq(100, 700, 100), Horsepower = c(150, 250, 350)),
      x.label = "Torque", y.label = "Highway MPG",
      main.title = "Interaction Between Torque and Horsepower on MPG")
```



## f.

Recall that the estimated coefficient $\hat{\beta}$ can be calculated as:

$$
\hat{\beta} = (X^T X)^{-1} X^T y
$$
where 

- $X$ is the $n \times p$ design matrix.
- $y$ is the vector of outcomes

Thus, we can derive the following:

```{r}
X <- model.matrix(highway.mpg)
y <- gasoline$Highway_MPG

gasoline_coefficient <- solve(t(X) %*% X) %*% t(X) %*% y
gasoline_coefficient
```

